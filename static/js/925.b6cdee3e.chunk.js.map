{"version":3,"file":"static/js/925.b6cdee3e.chunk.js","mappings":"4MAaaA,EAAiB,kBAAMC,EAAAA,EAAAA,OAU9BC,EAAiB,WACtB,IAAMC,EAAWH,IACXI,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAA+BA,EAAMC,KAAKH,UASrE,OAPAI,EAAAA,EAAAA,YAAU,WAET,OADAL,GAASM,EAAAA,EAAAA,OACF,WACNN,GAASO,EAAAA,EAAAA,UAER,CAACP,KAGH,iBACCQ,MAAO,CACNC,OAAQ,OACRC,QAAS,OACTC,cAAe,SACfC,eAAgB,iBALlB,UAQa,UAAXX,IAAsB,sEACvB,iCACC,SAACY,EAAD,KACA,SAACC,EAAD,WAMED,EAAyB,WAC9B,IAAME,GAAWb,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAA+BA,EAAMC,KAAKW,YACjEC,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAgBA,OANAf,EAAAA,EAAAA,YAAU,WACU,IAAD,EAAdc,IACH,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAErD,CAACJ,EAAcJ,KAGjB,iBACCP,MAAO,CAAEgB,UAAW,QAASf,OAAQ,OAAQgB,UAAW,OAAQC,aAAc,QAC9EC,SAjBoB,SAACC,GACtB,IAAMC,EAAO,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAGE,cACfC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cAAgB,KAC9EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAUjC,UAIEL,EAASqB,KAAI,SAACC,EAAGC,GAAJ,OACb,SAACC,EAAD,CAAoBC,QAASH,GAAfA,EAAEI,QAEjB,gBAAKC,IAAK1B,QAKPuB,EAAqDI,EAAAA,MAAW,YAAkB,IAAfH,EAAc,EAAdA,QACpEI,EAAYC,EAAQ,MACxB,OACC,2BACEL,EAAQM,OACR,gBACCC,IAAKP,EAAQM,MACbE,IAAI,GACJxC,MAAO,CAAEyC,MAAO,OAAQC,aAAc,MAAOC,YAAa,WAG3D,gBACCJ,IAAKH,EACLI,IAAI,GACJxC,MAAO,CAAEyC,MAAO,OAAQC,aAAc,MAAOC,YAAa,WAI5D,iBAAM3C,MAAO,CAAE4C,SAAU,SAAzB,UACC,4BAASZ,EAAQa,cAElB,cAAG7C,MAAO,CAAE8C,OAAQ,eAAgBF,SAAU,SAA9C,SAA0DZ,EAAQA,WAClE,gBACChC,MAAO,CACN8C,OAAQ,QACRL,MAAO,oBACPxC,OAAQ,MACR8C,WAAY,8BAOXzC,EAA+B,WACpC,OAA8BI,EAAAA,EAAAA,UAAS,IAAvC,eAAOsB,EAAP,KAAgBgB,EAAhB,KACMxD,EAAWH,IAEXI,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAA+BA,EAAMC,KAAKH,UAUrE,OACC,+BACC,4BACC,qBACCO,MAAO,CACNyC,MAAO,MACPC,aAAc,MACdzB,UAAW,OACXgC,OAAQ,OACRC,OAAQ,gCACRN,SAAU,SAEXO,SAAU,SAAA/B,GACT4B,EAAW5B,EAAEE,cAAc8B,QAE5BA,MAAOpB,KAGR,mBACCqB,SAAqB,UAAX5D,EACV6D,QA5BuB,WACrBtB,IAGLxC,GAAS+D,EAAAA,EAAAA,IAAYvB,IACrBgB,EAAW,MAwBRhD,MAAO,CAAE8C,OAAQ,UAAWF,SAAU,SAHvC,wBAYJ,UAnJ2B,WAC1B,OACC,gBAAK5C,MAAO,CAAEwD,QAAS,OAAQvD,OAAQ,OAAQ8C,WAAY,SAA3D,UACC,SAACxD,EAAD","sources":["pages/Chat/ChatPage.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { ChatMessageAPIType } from '../../api/chat-api';\nimport {\n\tsendMessage,\n\tstartMessagesListening,\n\tstopMessagesListening,\n} from '../../redux/chat-reducer';\nimport store, { AppStateGlobalType } from '../../redux/redux-store';\n\ntype AppAction = ReturnType<typeof store.dispatch>;\nexport type AppDispatch = ThunkDispatch<AppStateGlobalType, any, AppAction>;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nconst ChatPage: React.FC = () => {\n\treturn (\n\t\t<div style={{ padding: '10px', height: '100%', background: 'white' }}>\n\t\t\t<Chat />\n\t\t</div>\n\t);\n};\n\nconst Chat: React.FC = () => {\n\tconst dispatch = useAppDispatch();\n\tconst status = useSelector((state: AppStateGlobalType) => state.chat.status);\n\n\tuseEffect(() => {\n\t\tdispatch(startMessagesListening());\n\t\treturn () => {\n\t\t\tdispatch(stopMessagesListening());\n\t\t};\n\t}, [dispatch]);\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\theight: '100%',\n\t\t\t\tdisplay: 'flex',\n\t\t\t\tflexDirection: 'column',\n\t\t\t\tjustifyContent: 'space-between',\n\t\t\t}}\n\t\t>\n\t\t\t{status === 'error' && <div>Some error occured. Please refresh page</div>}\n\t\t\t<>\n\t\t\t\t<Messages />\n\t\t\t\t<AddMessageForm />\n\t\t\t</>\n\t\t</div>\n\t);\n};\n\nconst Messages: React.FC<{}> = () => {\n\tconst messages = useSelector((state: AppStateGlobalType) => state.chat.messages);\n\tconst messagesAnchorRef = useRef<HTMLDivElement>(null);\n\tconst [isAutoScroll, setIsAutoScroll] = useState(true);\n\n\tconst scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n\t\tconst element = e?.currentTarget;\n\t\tif (Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 200) {\n\t\t\t!isAutoScroll && setIsAutoScroll(true);\n\t\t} else {\n\t\t\tisAutoScroll && setIsAutoScroll(false);\n\t\t}\n\t};\n\tuseEffect(() => {\n\t\tif (isAutoScroll) {\n\t\t\tmessagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' });\n\t\t}\n\t}, [isAutoScroll, messages]);\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{ maxHeight: '440px', height: '100%', overflowY: 'auto', marginBottom: '10px' }}\n\t\t\tonScroll={scrollHandler}\n\t\t>\n\t\t\t{messages.map((m, index) => (\n\t\t\t\t<Message key={m.id} message={m} />\n\t\t\t))}\n\t\t\t<div ref={messagesAnchorRef}></div>\n\t\t</div>\n\t);\n};\n\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({ message }) => {\n\tlet avatarSrc = require(`../../assets/avatar.png`);\n\treturn (\n\t\t<div>\n\t\t\t{message.photo ? (\n\t\t\t\t<img\n\t\t\t\t\tsrc={message.photo}\n\t\t\t\t\talt=''\n\t\t\t\t\tstyle={{ width: '30px', borderRadius: '50%', marginRight: '10px' }}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<img\n\t\t\t\t\tsrc={avatarSrc}\n\t\t\t\t\talt=''\n\t\t\t\t\tstyle={{ width: '30px', borderRadius: '50%', marginRight: '10px' }}\n\t\t\t\t/>\n\t\t\t)}\n\n\t\t\t<span style={{ fontSize: '1.2em' }}>\n\t\t\t\t<strong>{message.userName}</strong>\n\t\t\t</span>\n\t\t\t<p style={{ margin: '5px 0 0 40px', fontSize: '1.2em' }}>{message.message}</p>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tmargin: '1em 0',\n\t\t\t\t\twidth: 'calc(100% - 10px)',\n\t\t\t\t\theight: '2px',\n\t\t\t\t\tbackground: 'rgba(0, 0, 0, 0.1)',\n\t\t\t\t}}\n\t\t\t></div>\n\t\t</div>\n\t);\n});\n\nconst AddMessageForm: React.FC<{}> = () => {\n\tconst [message, setMessage] = useState('');\n\tconst dispatch = useAppDispatch();\n\n\tconst status = useSelector((state: AppStateGlobalType) => state.chat.status);\n\n\tconst sendMessageHandler = () => {\n\t\tif (!message) {\n\t\t\treturn;\n\t\t}\n\t\tdispatch(sendMessage(message));\n\t\tsetMessage('');\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div>\n\t\t\t\t<textarea\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: '50%',\n\t\t\t\t\t\tborderRadius: '5px',\n\t\t\t\t\t\toverflowY: 'auto',\n\t\t\t\t\t\tresize: 'none',\n\t\t\t\t\t\tborder: '1px solid rgba(0, 0, 0, 0.25)',\n\t\t\t\t\t\tfontSize: '1.2em',\n\t\t\t\t\t}}\n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\tsetMessage(e.currentTarget.value);\n\t\t\t\t\t}}\n\t\t\t\t\tvalue={message}\n\t\t\t\t></textarea>\n\n\t\t\t\t<button\n\t\t\t\t\tdisabled={status !== 'ready'}\n\t\t\t\t\tonClick={sendMessageHandler}\n\t\t\t\t\tstyle={{ margin: '5px 0 0', fontSize: '1.2em' }}\n\t\t\t\t>\n\t\t\t\t\tSend\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default ChatPage;\n"],"names":["useAppDispatch","useDispatch","Chat","dispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","style","height","display","flexDirection","justifyContent","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","maxHeight","overflowY","marginBottom","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","avatarSrc","require","photo","src","alt","width","borderRadius","marginRight","fontSize","userName","margin","background","setMessage","resize","border","onChange","value","disabled","onClick","sendMessage","padding"],"sourceRoot":""}